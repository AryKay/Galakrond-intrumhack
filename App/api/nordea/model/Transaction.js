/**
 * Nordea Open Banking API
 * Open Banking API
 *
 * OpenAPI spec version: 2.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.NordeaOpenBankingApi) {
      root.NordeaOpenBankingApi = {};
    }
    root.NordeaOpenBankingApi.Transaction = factory(root.NordeaOpenBankingApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Transaction model module.
   * @module model/Transaction
   * @version 2.2
   */

  /**
   * Constructs a new <code>Transaction</code>.
   * Transaction details
   * @alias module:model/Transaction
   * @class
   * @param type {module:model/Transaction.TypeEnum} Actual type (model) of the transaction, either CreditTransaction or DebitTransaction
   * @param bookingDate {Date} Date transaction was booked to the account ledger
   * @param currency {String} Currency code according to ISO 4217
   * @param status {String} Status of the transaction
   * @param transactionId {String} Unique transaction identifier as defined by the bank
   */
  var exports = function(type, bookingDate, currency, status, transactionId) {
    var _this = this;

    _this['_type'] = type;

    _this['bookingDate'] = bookingDate;

    _this['currency'] = currency;




    _this['status'] = status;

    _this['transactionId'] = transactionId;


  };

  /**
   * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Transaction} obj Optional instance to populate.
   * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_type')) {
        obj['_type'] = ApiClient.convertToType(data['_type'], 'String');
      }
      if (data.hasOwnProperty('amount')) {
        obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
      }
      if (data.hasOwnProperty('bookingDate')) {
        obj['bookingDate'] = ApiClient.convertToType(data['bookingDate'], 'Date');
      }
      if (data.hasOwnProperty('counterpartyName')) {
        obj['counterpartyName'] = ApiClient.convertToType(data['counterpartyName'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('message')) {
        obj['message'] = ApiClient.convertToType(data['message'], 'String');
      }
      if (data.hasOwnProperty('narrative')) {
        obj['narrative'] = ApiClient.convertToType(data['narrative'], 'String');
      }
      if (data.hasOwnProperty('ownMessage')) {
        obj['ownMessage'] = ApiClient.convertToType(data['ownMessage'], 'String');
      }
      if (data.hasOwnProperty('reference')) {
        obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('transactionDate')) {
        obj['transactionDate'] = ApiClient.convertToType(data['transactionDate'], 'Date');
      }
      if (data.hasOwnProperty('transactionId')) {
        obj['transactionId'] = ApiClient.convertToType(data['transactionId'], 'String');
      }
      if (data.hasOwnProperty('typeDescription')) {
        obj['typeDescription'] = ApiClient.convertToType(data['typeDescription'], 'String');
      }
      if (data.hasOwnProperty('valueDate')) {
        obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
      }
    }
    return obj;
  }

  /**
   * Actual type (model) of the transaction, either CreditTransaction or DebitTransaction
   * @member {module:model/Transaction.TypeEnum} _type
   */
  exports.prototype['_type'] = undefined;
  /**
   * Transaction value
   * @member {String} amount
   */
  exports.prototype['amount'] = undefined;
  /**
   * Date transaction was booked to the account ledger
   * @member {Date} bookingDate
   */
  exports.prototype['bookingDate'] = undefined;
  /**
   * Counterparty name
   * @member {String} counterpartyName
   */
  exports.prototype['counterpartyName'] = undefined;
  /**
   * Currency code according to ISO 4217
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * Message from remitter to beneficiary. In Finland this may alternatively include a short description of the transaction e.g. 'Automaattiotto'
   * @member {String} message
   */
  exports.prototype['message'] = undefined;
  /**
   * Transaction narrative (customer custom message)
   * @member {String} narrative
   */
  exports.prototype['narrative'] = undefined;
  /**
   * Text message for the account holder's own use
   * @member {String} ownMessage
   */
  exports.prototype['ownMessage'] = undefined;
  /**
   * Reference number
   * @member {String} reference
   */
  exports.prototype['reference'] = undefined;
  /**
   * Status of the transaction
   * @member {String} status
   */
  exports.prototype['status'] = undefined;
  /**
   * Date on which transaction was enacted
   * @member {Date} transactionDate
   */
  exports.prototype['transactionDate'] = undefined;
  /**
   * Unique transaction identifier as defined by the bank
   * @member {String} transactionId
   */
  exports.prototype['transactionId'] = undefined;
  /**
   * Description of the type of transaction, e.g. Cash withdrawal, Account transfer, etc. (localized)
   * @member {String} typeDescription
   */
  exports.prototype['typeDescription'] = undefined;
  /**
   * Value date of the transaction, used for interest calculation
   * @member {Date} valueDate
   */
  exports.prototype['valueDate'] = undefined;


  /**
   * Allowed values for the <code>_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "CreditTransaction"
     * @const
     */
    "CreditTransaction": "CreditTransaction",
    /**
     * value: "DebitTransaction"
     * @const
     */
    "DebitTransaction": "DebitTransaction"  };


  return exports;
}));


