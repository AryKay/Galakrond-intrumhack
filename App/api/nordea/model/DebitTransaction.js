/**
 * Nordea Open Banking API
 * Open Banking API
 *
 * OpenAPI spec version: 2.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Transaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Transaction'));
  } else {
    // Browser globals (root is window)
    if (!root.NordeaOpenBankingApi) {
      root.NordeaOpenBankingApi = {};
    }
    root.NordeaOpenBankingApi.DebitTransaction = factory(root.NordeaOpenBankingApi.ApiClient, root.NordeaOpenBankingApi.Transaction);
  }
}(this, function(ApiClient, Transaction) {
  'use strict';




  /**
   * The DebitTransaction model module.
   * @module model/DebitTransaction
   * @version 2.2
   */

  /**
   * Constructs a new <code>DebitTransaction</code>.
   * Debit transaction with negative amount
   * @alias module:model/DebitTransaction
   * @class
   * @extends module:model/Transaction
   * @param type {module:model/Transaction.TypeEnum} Actual type (model) of the transaction, either CreditTransaction or DebitTransaction
   * @param bookingDate {Date} Date transaction was booked to the account ledger
   * @param currency {String} Currency code according to ISO 4217
   * @param status {String} Status of the transaction
   * @param transactionId {String} Unique transaction identifier as defined by the bank
   */
  var exports = function(type, bookingDate, currency, status, transactionId) {
    var _this = this;
    Transaction.call(_this, type, bookingDate, currency, status, transactionId);

  };

  /**
   * Constructs a <code>DebitTransaction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DebitTransaction} obj Optional instance to populate.
   * @return {module:model/DebitTransaction} The populated <code>DebitTransaction</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      Transaction.constructFromObject(data, obj);
      if (data.hasOwnProperty('creditorName')) {
        obj['creditorName'] = ApiClient.convertToType(data['creditorName'], 'String');
      }
    }
    return obj;
  }

  exports.prototype = Object.create(Transaction.prototype);
  exports.prototype.constructor = exports;

  /**
   * Name of the payee
   * @member {String} creditorName
   */
  exports.prototype['creditorName'] = undefined;



  return exports;
}));


