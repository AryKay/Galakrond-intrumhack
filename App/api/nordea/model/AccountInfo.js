/**
 * Nordea Open Banking API
 * Open Banking API
 *
 * OpenAPI spec version: 2.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountNumber', 'model/Link'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AccountNumber'), require('./Link'));
  } else {
    // Browser globals (root is window)
    if (!root.NordeaOpenBankingApi) {
      root.NordeaOpenBankingApi = {};
    }
    root.NordeaOpenBankingApi.AccountInfo = factory(root.NordeaOpenBankingApi.ApiClient, root.NordeaOpenBankingApi.AccountNumber, root.NordeaOpenBankingApi.Link);
  }
}(this, function(ApiClient, AccountNumber, Link) {
  'use strict';




  /**
   * The AccountInfo model module.
   * @module model/AccountInfo
   * @version 2.2
   */

  /**
   * Constructs a new <code>AccountInfo</code>.
   * Basic account information
   * @alias module:model/AccountInfo
   * @class
   * @param id {String} Internal, technical account identifier
   * @param accountName {String} Account name
   * @param accountNumber {module:model/AccountNumber} Account number
   * @param accountNumbers {Array.<module:model/AccountNumber>} Account numbers
   * @param accountType {module:model/AccountInfo.AccountTypeEnum} Account type
   * @param availableBalance {String} Available balance indicates the funds which are available to the account holder at the time of the query
   * @param bookedBalance {String} Booked balance includes all transactions entered on the account at the time of the query
   * @param currency {String} Currency code according to ISO 4217
   * @param product {String} Name of the banking product delivered by this account
   */
  var exports = function(id, accountName, accountNumber, accountNumbers, accountType, availableBalance, bookedBalance, currency, product) {
    var _this = this;

    _this['_id'] = id;

    _this['accountName'] = accountName;
    _this['accountNumber'] = accountNumber;
    _this['accountNumbers'] = accountNumbers;
    _this['accountType'] = accountType;
    _this['availableBalance'] = availableBalance;
    _this['bookedBalance'] = bookedBalance;

    _this['currency'] = currency;

    _this['product'] = product;

  };

  /**
   * Constructs a <code>AccountInfo</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AccountInfo} obj Optional instance to populate.
   * @return {module:model/AccountInfo} The populated <code>AccountInfo</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_id')) {
        obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
      }
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = ApiClient.convertToType(data['_links'], [Link]);
      }
      if (data.hasOwnProperty('accountName')) {
        obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
      }
      if (data.hasOwnProperty('accountNumber')) {
        obj['accountNumber'] = AccountNumber.constructFromObject(data['accountNumber']);
      }
      if (data.hasOwnProperty('accountNumbers')) {
        obj['accountNumbers'] = ApiClient.convertToType(data['accountNumbers'], [AccountNumber]);
      }
      if (data.hasOwnProperty('accountType')) {
        obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
      }
      if (data.hasOwnProperty('availableBalance')) {
        obj['availableBalance'] = ApiClient.convertToType(data['availableBalance'], 'String');
      }
      if (data.hasOwnProperty('bookedBalance')) {
        obj['bookedBalance'] = ApiClient.convertToType(data['bookedBalance'], 'String');
      }
      if (data.hasOwnProperty('country')) {
        obj['country'] = ApiClient.convertToType(data['country'], 'String');
      }
      if (data.hasOwnProperty('currency')) {
        obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
      }
      if (data.hasOwnProperty('ownerName')) {
        obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
      }
      if (data.hasOwnProperty('product')) {
        obj['product'] = ApiClient.convertToType(data['product'], 'String');
      }
      if (data.hasOwnProperty('valueDatedBalance')) {
        obj['valueDatedBalance'] = ApiClient.convertToType(data['valueDatedBalance'], 'String');
      }
    }
    return obj;
  }

  /**
   * Internal, technical account identifier
   * @member {String} _id
   */
  exports.prototype['_id'] = undefined;
  /**
   * HATEOAS inspired links
   * @member {Array.<module:model/Link>} _links
   */
  exports.prototype['_links'] = undefined;
  /**
   * Account name
   * @member {String} accountName
   */
  exports.prototype['accountName'] = undefined;
  /**
   * Account number
   * @member {module:model/AccountNumber} accountNumber
   */
  exports.prototype['accountNumber'] = undefined;
  /**
   * Account numbers
   * @member {Array.<module:model/AccountNumber>} accountNumbers
   */
  exports.prototype['accountNumbers'] = undefined;
  /**
   * Account type
   * @member {module:model/AccountInfo.AccountTypeEnum} accountType
   */
  exports.prototype['accountType'] = undefined;
  /**
   * Available balance indicates the funds which are available to the account holder at the time of the query
   * @member {String} availableBalance
   */
  exports.prototype['availableBalance'] = undefined;
  /**
   * Booked balance includes all transactions entered on the account at the time of the query
   * @member {String} bookedBalance
   */
  exports.prototype['bookedBalance'] = undefined;
  /**
   * Country code where the account is held according to ISO ALPHA-2
   * @member {String} country
   */
  exports.prototype['country'] = undefined;
  /**
   * Currency code according to ISO 4217
   * @member {String} currency
   */
  exports.prototype['currency'] = undefined;
  /**
   * OwnerName is going to be deprecated 
   * @member {String} ownerName
   */
  exports.prototype['ownerName'] = undefined;
  /**
   * Name of the banking product delivered by this account
   * @member {String} product
   */
  exports.prototype['product'] = undefined;
  /**
   * Value dated balance is the balance on the basis of which interest is calculated on the account
   * @member {String} valueDatedBalance
   */
  exports.prototype['valueDatedBalance'] = undefined;


  /**
   * Allowed values for the <code>accountType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AccountTypeEnum = {
    /**
     * value: "Current"
     * @const
     */
    "Current": "Current"  };


  return exports;
}));


