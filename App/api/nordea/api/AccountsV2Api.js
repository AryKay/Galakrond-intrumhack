/**
 * Nordea Open Banking API
 * Open Banking API
 *
 * OpenAPI spec version: 2.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccountDetails2', 'model/AccountDetailsResponse', 'model/AccountListResponse', 'model/ExternalErrorResponse', 'model/Transaction', 'model/TransactionListResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccountDetails2'), require('../model/AccountDetailsResponse'), require('../model/AccountListResponse'), require('../model/ExternalErrorResponse'), require('../model/Transaction'), require('../model/TransactionListResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.NordeaOpenBankingApi) {
      root.NordeaOpenBankingApi = {};
    }
    root.NordeaOpenBankingApi.AccountsV2Api = factory(root.NordeaOpenBankingApi.ApiClient, root.NordeaOpenBankingApi.AccountDetails2, root.NordeaOpenBankingApi.AccountDetailsResponse, root.NordeaOpenBankingApi.AccountListResponse, root.NordeaOpenBankingApi.ExternalErrorResponse, root.NordeaOpenBankingApi.Transaction, root.NordeaOpenBankingApi.TransactionListResponse);
  }
}(this, function(ApiClient, AccountDetails2, AccountDetailsResponse, AccountListResponse, ExternalErrorResponse, Transaction, TransactionListResponse) {
  'use strict';

  /**
   * AccountsV2 service.
   * @module api/AccountsV2Api
   * @version 2.2
   */

  /**
   * Constructs a new AccountsV2Api. 
   * @alias module:api/AccountsV2Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountDetails operation.
     * @callback module:api/AccountsV2Api~accountDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account details by account id
     * Details of specified account
     * @param {String} accountId Internal, technical account identifier
     * @param {module:api/AccountsV2Api~accountDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountDetailsResponse}
     */
    this.accountDetails = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling accountDetails");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountDetailsResponse;

      return this.apiClient.callApi(
        '/v2/accounts/{accountId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountList operation.
     * @callback module:api/AccountsV2Api~accountListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List accounts
     * List of accounts and their details
     * @param {module:api/AccountsV2Api~accountListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountListResponse}
     */
    this.accountList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountListResponse;

      return this.apiClient.callApi(
        '/v2/accounts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountV2 operation.
     * @callback module:api/AccountsV2Api~createAccountV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountDetails2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox: Create an account
     * @param {module:model/AccountDetails2} mockAccountDetailsV2 
     * @param {module:api/AccountsV2Api~createAccountV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountDetails2}
     */
    this.createAccountV2 = function(mockAccountDetailsV2, callback) {
      var postBody = mockAccountDetailsV2;

      // verify the required parameter 'mockAccountDetailsV2' is set
      if (mockAccountDetailsV2 === undefined || mockAccountDetailsV2 === null) {
        throw new Error("Missing the required parameter 'mockAccountDetailsV2' when calling createAccountV2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountDetails2;

      return this.apiClient.callApi(
        '/v2/accounts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/AccountsV2Api~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox: Create a transaction linked to a created account
     * @param {String} accountId 
     * @param {module:model/Transaction} transactionV2 
     * @param {module:api/AccountsV2Api~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transaction}
     */
    this.createTransaction = function(accountId, transactionV2, callback) {
      var postBody = transactionV2;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling createTransaction");
      }

      // verify the required parameter 'transactionV2' is set
      if (transactionV2 === undefined || transactionV2 === null) {
        throw new Error("Missing the required parameter 'transactionV2' when calling createTransaction");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Transaction;

      return this.apiClient.callApi(
        '/v2/accounts/{accountId}/transactions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserdefinedAccount operation.
     * @callback module:api/AccountsV2Api~deleteUserdefinedAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountDetails2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sandbox: Delete a created account
     * @param {String} accountId 
     * @param {module:api/AccountsV2Api~deleteUserdefinedAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountDetails2}
     */
    this.deleteUserdefinedAccount = function(accountId, callback) {
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteUserdefinedAccount");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AccountDetails2;

      return this.apiClient.callApi(
        '/v2/accounts/{accountId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionsList operation.
     * @callback module:api/AccountsV2Api~transactionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get account transactions
     * Detailed transaction history for specified account
     * @param {String} accountId Internal, technical account identifier
     * @param {Object} opts Optional parameters
     * @param {Date} opts.fromDate List transactions starting from and including this date
     * @param {Date} opts.toDate List transactions until and including this date
     * @param {String} opts.language Preferred language for textual values
     * @param {String} opts.continuationKey Key to subsequent page of transaction history
     * @param {module:api/AccountsV2Api~transactionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionListResponse}
     */
    this.transactionsList = function(accountId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling transactionsList");
      }


      var pathParams = {
        'accountId': accountId
      };
      var queryParams = {
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'language': opts['language'],
        'continuationKey': opts['continuationKey'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientId', 'oauth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = TransactionListResponse;

      return this.apiClient.callApi(
        '/v2/accounts/{accountId}/transactions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
